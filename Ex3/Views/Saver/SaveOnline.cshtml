
@{
    ViewBag.Title = "SaveOnline";
}

<style>
    body, html {
        width: 100%;
        height: 100%;
        padding: 0;
        margin: 0;
    }

    body {
        background-image: url("/Map/map.png");
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
    }

    canvas {
        position: absolute;
        top: 0;
        left: 0;
    }

    .canvas-wrap {
        position: relative;
        width: 100%;
        height: 100%;
    }
</style>

<div class="canvas-wrap">
    <canvas id="dotCvs"></canvas>
    <canvas id="pathCvs"></canvas>
</div>

<script>
    var mainInterval = null;
    var intervalTime = 1000 / @Session["rate"];

        var onlineController = (function () {
            var lastBeforeCurrentPoint = { x: null, y: null};
            var currentPoint = { x: null, y: null };
            var params = "/position/longitude-deg,/position/latitude-deg,/controls/engines/current-engine/throttle,/controls/flight/rudder"
            var inserted = 0;
            var iterations = @Session["iterations"];

            var fileName = '@ViewBag.fileName';
            var toCreateFile = true;

            var pathCanvas = document.getElementById("pathCvs");
            pathCanvas.width = window.innerWidth;
            pathCanvas.height = window.innerHeight;
            var pathContext = pathCanvas.getContext("2d");
            pathContext.strokeStyle = "red";

            var dotCanvas = document.getElementById("dotCvs");
            dotCanvas.width = window.innerWidth;
            dotCanvas.height = window.innerHeight;
            var dotContex = dotCanvas.getContext("2d");
             //save the new current location
            function SaveCurrentLocation(toBeSaved) {
                $.ajax({
                    type: "POST",
                    data: { 'data': toBeSaved,'fileName': fileName, 'toCreateFile': toCreateFile },
                    url: "@Url.Action("SaveDataSample")",
                    async: false,
                    success: function () {
                        toCreateFile = false
                        inserted = inserted + 1
                        if (inserted == iterations) {
                            clearInterval(mainInterval);
                        }
                    }
                });
            }

             //get the new current location
            function GetNewCurrentLocation() {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetDataFromSimulator", "Displayer")",
                    data: { query: params },
                    async: false,
                    success: function (data) {
                        var xmlDoc = $.parseXML(data),
                            $xml = $(xmlDoc);
                        var longtitudeString = $xml.find("lon").text();
                        var latitudeString = $xml.find("lat").text();
                        var throttle = $xml.find("throttle").text();
                        var rudder = $xml.find("rudder").text();
                        lastBeforeCurrentPoint.x = currentPoint.x;
                        lastBeforeCurrentPoint.y = currentPoint.y;
                        currentPoint.x = (parseFloat(longtitudeString) + 180) * (window.innerWidth / 360);
                        currentPoint.y = (parseFloat(latitudeString) + 90) * (window.innerHeight / 180);

                        var toBeSaved = longtitudeString + ',' + latitudeString + ',' +
                            throttle + ',' + rudder;
                        SaveCurrentLocation(toBeSaved);
                    }
                });
            }
            //drawing line from last location to current location
            function DrawFromLastToCurrentLine() {
                pathContext.moveTo(lastBeforeCurrentPoint.x, lastBeforeCurrentPoint.y);
                pathContext.quadraticCurveTo(lastBeforeCurrentPoint.x, lastBeforeCurrentPoint.y, currentPoint.x, currentPoint.y);
                pathContext.stroke();
            }
            //drawing circle
            function DrawCicrle(color, position, size) {
                dotContex.fillStyle = color;
                dotContex.beginPath();
                dotContex.arc(position.x, position.y, size, 0, 2 * Math.PI);
                dotContex.fill();
            }
            //drawing current location
            function DrawCurrentLocation() {
                dotContex.clearRect(0, 0, dotCanvas.width, dotCanvas.height);
                DrawCicrle("blue", currentPoint, 8);
                DrawCicrle("red", currentPoint, 5);
            }

            function UpdateCanvas() {
                GetNewCurrentLocation();

                if (lastBeforeCurrentPoint.x != null) {
                    DrawFromLastToCurrentLine();
                }
                DrawCurrentLocation();
            }

            return {
                UpdateCanvas: UpdateCanvas
            };
        })();

    window.onload = function () {
        //set interval
        mainInterval = setInterval(onlineController.UpdateCanvas, intervalTime);
    }
</script>

